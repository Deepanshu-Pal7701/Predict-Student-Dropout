{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMxguhGNykd382e+tgcnjXC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"JbrHtz94sB8I"},"outputs":[],"source":["# prompt: For these problems, you have to generate heat maps of confusion matrices and calculate the\n","# evaluation metrics such as accuracy, precision, recall for classification-type problems, and for\n","# others perform segmentation and clustering.\n","# 1. Predict Student Dropout\n","# Classify whether a student is at risk of dropping out based on attendance, grades, and\n","# participation.\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Sample data (replace with your actual data)\n","data = {\n","    'Attendance': [90, 80, 70, 60, 95, 85, 75, 65, 50, 92],\n","    'Grades': [85, 78, 65, 50, 92, 88, 72, 60, 45, 90],\n","    'Participation': [10, 8, 5, 2, 10, 9, 7, 4, 1, 9],\n","    'Dropout': [0, 0, 1, 1, 0, 0, 0, 1, 1, 0]  # 0: Not dropout, 1: Dropout\n","}\n","df = pd.DataFrame(data)\n","\n","# Separate features (X) and target (y)\n","X = df.drop('Dropout', axis=1)\n","y = df['Dropout']\n","\n","# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Scale the features\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","# Train a Logistic Regression model (choose appropriate model for your data)\n","model = LogisticRegression()\n","model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = model.predict(X_test)\n","\n","# Evaluate the model\n","cm = confusion_matrix(y_test, y_pred)\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","\n","print(f\"Confusion Matrix:\\n{cm}\")\n","print(f\"Accuracy: {accuracy}\")\n","print(f\"Precision: {precision}\")\n","print(f\"Recall: {recall}\")\n","\n","# Plot the confusion matrix as a heatmap\n","plt.figure(figsize=(6, 4))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=['Not Dropout', 'Dropout'],\n","            yticklabels=['Not Dropout', 'Dropout'])\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('Confusion Matrix')\n","plt.show()\n"]}]}